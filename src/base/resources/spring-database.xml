<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
       xmlns:context="http://www.springframework.org/schema/context"  
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc"  
       xsi:schemaLocation="http://www.springframework.org/schema/beans  
       http://www.springframework.org/schema/beans/spring-beans.xsd  
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/tx 
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/context  
       http://www.springframework.org/schema/context/spring-context.xsd  
       http://www.springframework.org/schema/mvc  
       http://www.springframework.org/schema/mvc/spring-mvc.xsd">  

   <!--********************************************配置数据库********************************************-->


    <!--配置数据源-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass" value="${jdbc.driver}" />  <!--数据库连接驱动-->
        <property name="jdbcUrl" value="${jdbc.url}" />     <!--数据库地址-->
        <property name="user" value="${jdbc.username}" />   <!--用户名-->
        <property name="password" value="${jdbc.password}" />   <!--密码-->
        <property name="maxPoolSize" value="${c3p0.maxPoolSize}" />      <!--最大连接数-->
        <property name="minPoolSize" value="${c3p0.minPoolSize}" />       <!--最小连接数-->
        <property name="initialPoolSize" value="${c3p0.initialPoolSize}" />      <!--初始化连接池内的数据库连接-->
        <property name="maxIdleTime" value="${c3p0.maxIdleTime}" />  <!--最大空闲时间-->



    <!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
    <property name="idleConnectionTestPeriod">
        <value>60</value>
    </property>

    <!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
    <property name="acquireRetryAttempts">
        <value>15</value>
    </property>
    </bean>




    <!-- sessionFactory 将spring和mybatis整合 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!-- <property name="configLocation" value="classpath:sqlMapConfig.xml" /> -->
        <!--<property name="mapperLocations" value="classpath:org/zyyd/base/dao/mapper/*.xml" /> -->   <!-- 加载mapper文件 如果如接口在同一路径下可不写 -->
        <property name="mapperLocations" >
            <array>
                <value>classpath:org/zyyd/base/dao/mapper/*.xml</value>
                <value>classpath:org/zyyd/base/dao/mapper/vo/*.xml</value>
                <value>classpath:org/zyyd/engin/dao/mapper/*.xml</value>
                <value>classpath:org/zyyd/engin/dao/mapper/vo/*.xml</value>
            </array>
        </property>

        <property name="typeAliasesPackage" value="org.zyyd.*.entity"></property>	<!-- 扫描实体类 -->
        <property name="typeHandlersPackage" value="org.zyyd.*.entity.typehandler"></property>
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageInterceptor">
                    <property name="properties">
                        <value>
                            params=mysql
                        </value>
                    </property>
                </bean>
            </array>
        </property>

    </bean>

    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="org.zyyd.*.dao" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>

    <!-- 事务 -->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <!-- 启用对事务注解的支持 -->
    <tx:annotation-driven transaction-manager="txManager"/>
    <!--
        配置文件形式事物配置，两种方式的事物配置，不需同时配置 -->
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="save*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="find" read-only="true" rollback-for="Exception"/>
            <tx:method name="get" read-only="true" rollback-for="Exception"/>
            <tx:method name="*" propagation="REQUIRED" />
        </tx:attributes>
    </tx:advice>
    <aop:config>
        <aop:pointcut expression="execution(* org.zyyd.*.service..*(..))"
                      id="pointCut" />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pointCut" />
    </aop:config>

    <!-- 启用对事务注解的支持 -->
    <!--<tx:annotation-driven transaction-manager="transactionManager"/>-->


    <!-- 配置事务的的切点AOP，并把事务属性与切点关联起来 -->
    <!-- <aop:config proxy-target-class="true">
        <aop:pointcut expression="execution(* org.szd.base.service.impl.*.*(..))" id="pointcut"/>
        <aop:pointcut expression="execution(* org.work.platform.dao.impl.*.*(..))" id="pointcut"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pointcut"/>
     </aop:config>-->

</beans>